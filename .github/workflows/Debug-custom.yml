name: debug custom (JSON strict)

on:
  workflow_dispatch:
    inputs:
      board_label:
        type: choice
        description: 'Select a common Arduino-ESP32 board (or choose "Other (enter FQBN)")'
        default: 'Generic ESP32 Dev Module'
        options:
          - Generic ESP32 Dev Module
          - DOIT ESP32 DEVKIT V1
          - NodeMCU-32S
          - ESP32 DevKitC V4
          - ESP32 WROOM-DA Module
          - ESP32 WROVER Module
          - ESP32 WROVER Kit (all versions)
          - ESP32 PICO-D4
          - AI Thinker ESP32-CAM
          - Lolin D32
          - Lolin D32 Pro
          - FireBeetle2 ESP32-E
          - Heltec WiFi Kit 32 (V3)
          - ESP32-S2 Dev Module
          - ESP32-S2 Saola-1
          - Adafruit Feather ESP32-S2
          - ESP32-S3 Dev Module
          - Adafruit Feather ESP32-S3 (2MB PSRAM)
          - M5StickC / M5StickC-Plus
          - M5Stamp S3
          - Other (enter FQBN)

      fqbn_override:
        description: 'If "Other", paste exact FQBN (e.g., esp32:esp32:nodemcu-32s or esp32:esp32:esp32s3:PSRAM=enabled)'
        required: false
        default: ''

      profile_name:
        type: choice
        description: 'Profile from modules_presets.json (Auto picks from manifest.json)'
        default: 'Auto (from board)'
        options:
          - Auto (from board)
          - Minimal
          - Standard
          - Full
          - Wardriver
          - Scanner
          - BLE-only
          - Displayless
          - Debug
          - Custom

      modules_csv:
        description: 'If profile_name=Custom: CSV like WIFI,BLE,WEB,SD,GPS,TOUCH,LVGL,NEOPIXEL,BUZZER,BUTTONS,BATTERY,NRF24,USB_MSC,TFT_ON,DEBUG,DUAL_WIFI,2WIFI'
        required: false
        default: ''

      custom_pins:
        description: >
          Free-form pin overrides. Examples:
          "gps_pin=34,33"
          "tft_pin=19,23,18,5,21,22"
          "tft_mosi=23 tft_sclk=18 tft_dc=21 tft_rst=22 tft_cs=5 tft_bl=4"
          "touch_cs=27 touch_irq=36"
          (space-separated key=value list; values can be CSV)
        required: false
        default: ''

      tft_model:
        type: choice
        description: 'Select TFT/Display model (from display_presets.json)'
        default: 'None'
        options:
          - None
          - ILI9341
          - ILI9488
          - ST7789
          - ST7735
          - ILI9225
          - ILI9163
          - SSD1306
          - SH1106
          - SSD1331
          - GC9A01
          - ST7796
          - HX8357
          - ILI9486
          - ILI9481
          - ILI9806
          - EPD2IN9
          - EPD2IN13
          - EPD7IN5
          - RA8875

      core_choice:
        description: "ESP32 core version"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - 2.0.10
          - 3.3.0

      filesystem:
        type: choice
        description: 'Filesystem override (blank = default/manifest)'
        default: ''
        options: ['', 'spiffs', 'littlefs']

      partition_choice:
        description: "Partition table"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - Marauder Default (SPIFFS)
          - Marauder Default (LittleFS)
          - Min OTA (SPIFFS)
          - Min OTA (LittleFS)
          - OTA 1M App + 1M FS (SPIFFS)
          - Huge App + 1M FS (SPIFFS)
          - OTA Dual 1M/1M + 2M FS (SPIFFS)
          - App 2M + FS 2M (SPIFFS)
          - WiFi Capture Big FS (SPIFFS ~3MB)
          - Marauder SPIFFS OTA (Tiny FS)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure system deps
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq unzip rsync

      - name: Ensure Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        shell: bash
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade pip
          pip install pyserial

      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2
        with:
          version: 0.35.3

      - name: Configure ESP32 board manager
        shell: bash
        run: |
          set -euo pipefail
          arduino-cli config init
          arduino-cli config set board_manager.additional_urls \
            https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          arduino-cli core update-index --additional-urls \
            https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json

      # --- Inputs -> ENV priming ---
      - name: Seed selector env from inputs
        shell: bash
        run: |
          set -euo pipefail
          echo "BOARD_LABEL=${{ github.event.inputs.board_label }}" >> $GITHUB_ENV
          echo "CORE_CHOICE=${{ github.event.inputs.core_choice }}" >> $GITHUB_ENV
          echo "PARTITION_CHOICE=${{ github.event.inputs.partition_choice }}" >> $GITHUB_ENV
          echo "FQBN_OVERRIDE=${{ github.event.inputs.fqbn_override }}" >> $GITHUB_ENV
          echo "PROFILE_NAME=${{ github.event.inputs.profile_name }}" >> $GITHUB_ENV
          echo "MODULES_CSV=${{ github.event.inputs.modules_csv }}" >> $GITHUB_ENV
          echo "CUSTOM_PINS=${{ github.event.inputs.custom_pins }}" >> $GITHUB_ENV
          echo "FILESYSTEM_OVERRIDE=${{ github.event.inputs.filesystem }}" >> $GITHUB_ENV
          echo "TFT_MODEL_INPUT=${{ github.event.inputs.tft_model }}" >> $GITHUB_ENV

      # (Optional) Special mapping for AirysDark build
      # - name: AirysDark build mapping (optional)
      #   shell: bash
      #   run: |
      #     set -euo pipefail
      #     if [ "${BOARD_LABEL}" = "AirysDark build" ]; then
      #       echo "BOARD_LABEL=AirysDark S3" >> $GITHUB_ENV
      #       echo "PROFILE_NAME=Full" >> $GITHUB_ENV
      #     fi

      # --- Manifest debug and exporter enforcement ---
      - name: Manifest probe (board row preview)
        shell: bash
        run: |
          set -euo pipefail
          MAN="scaffold/configs/boards/boards_manifest.json"
          if [ ! -f "$MAN" ]; then
            echo "::error::Missing $MAN"; exit 1
          fi
          echo ">> Looking up BOARD_LABEL='${BOARD_LABEL:-}' in $MAN"
          jq -r '
            def rows:
              if type=="array" then .
              elif type=="object" and .boards then .boards
              elif type=="object" then [ to_entries[] | {flag:.key} + (.value) ]
              else [] end;
            rows
            | map(select((.board_label//"")==env.BOARD_LABEL))
            | .[0] // {}
          ' "$MAN"

      - name: Export board env from JSON manifest (strict)
        shell: bash
        run: |
          set -euo pipefail
          echo "BOARD_LABEL=${BOARD_LABEL}" >> $GITHUB_ENV
          python3 scaffold/tools/export_env_from_json.py >> $GITHUB_ENV 2>exporter.err || true
          echo "----- exporter stderr -----"
          cat exporter.err || true

          # Allow "Other (enter FQBN)" to override FQBN
          if [ "${BOARD_LABEL}" = "Other (enter FQBN)" ] && [ -n "${FQBN_OVERRIDE}" ]; then
            echo "FQBN=${FQBN_OVERRIDE}" >> $GITHUB_ENV
            if ! grep -q "^BOARD_FLAG=" $GITHUB_ENV; then
              echo "BOARD_FLAG=CUSTOM_OTHER" >> $GITHUB_ENV
            fi
          fi

          # Strict checks
          for var in BOARD_FLAG FQBN CORE_VERSION PARTITION FILESYSTEM; do
            if ! grep -q "^${var}=" $GITHUB_ENV; then
              echo "::error::${var} missing from exporter for BOARD_LABEL='${BOARD_LABEL}'"
              exit 1
            fi
          done

      # --- Core selection: auto/manual ---
      - name: Resolve core version (auto/manual)
        shell: bash
        run: |
          set -euo pipefail
          case "${CORE_CHOICE:-auto}" in
            auto)
              echo "::notice::Using core from manifest: ${CORE_VERSION}"
              ;;
            *)
              echo "CORE_VERSION=${CORE_CHOICE}" >> $GITHUB_ENV
              echo "::notice::Overriding core to ${CORE_CHOICE}"
              ;;
          esac

      - name: Install ESP32 core (with retry)
        shell: bash
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            arduino-cli core install "esp32:esp32@${CORE_VERSION}" \
              --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json && break || {
                echo "Install attempt $i failed; retrying in 5s..."
                sleep 5
              }
          done
          arduino-cli core list

      # --- Libraries ---
      - name: Clean conflicting libraries
        shell: bash
        run: |
          set -euo pipefail
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"
          cd "$LIBDIR"
          rm -rf XPT2049Touch XPT2046_Touchscreen TFT_eSPI || true

      - name: Extract pre-bundled libs (JSON-driven)
        shell: bash
        run: |
          set -euo pipefail
          JSON="scaffold/configs/libs/lib_list.json"
          ZIPROOT="scaffold/lib"
          LIBDIR="$HOME/Arduino/libraries"
          mkdir -p "$LIBDIR"

          if [ ! -f "$JSON" ]; then
            echo "::error::$JSON not found"; exit 1
          fi

          echo "lib_list.json (first 200 bytes):"
          head -c 200 "$JSON" || true; echo

          mapfile -t ZIPS < <(jq -r '
            def aszip:
              if type=="string" then .
              elif type=="object" then ( .zip // .["# zip_file"] // empty )
              else empty end;
            if type=="array" then map(aszip)[]
            elif type=="object" and .libs then (.libs | map(aszip)[])
            else empty end
            | select(. != null and . != "")
          ' "$JSON")

          if [ "${#ZIPS[@]}" -eq 0 ]; then
            echo "::error::No ZIP entries found in $JSON"
            exit 1
          fi

          echo "Found ${#ZIPS[@]} zip(s):"
          for z in "${ZIPS[@]}"; do echo "  - $z"; done

          for ZIP in "${ZIPS[@]}"; do
            FILE="$ZIPROOT/$ZIP"
            if [ -f "$FILE" ]; then
              echo "Unpacking $ZIP -> $LIBDIR"
              unzip -o "$FILE" -d "$LIBDIR" >/dev/null
            else
              echo "::warning::$ZIP not found at $ZIPROOT"
            fi
          done

      # ---------- Stage sketch ----------
      - name: Prepare Sketch Folder
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          SKETCH_DIR="${PWD}/_build/esp32_marauder_rewired"
          rm -rf "$SKETCH_DIR"; mkdir -p "$SKETCH_DIR"
          SRC_INO="$(ls scaffold/*.ino | head -n 1)"
          cp "$SRC_INO" "$SKETCH_DIR/esp32_marauder_rewired.ino"
          rsync -a scaffold/ "$SKETCH_DIR/"
          echo "sketch_dir=$SKETCH_DIR" >> $GITHUB_OUTPUT
          ls -la "$SKETCH_DIR"

      # ---------- Apply filesystem override (if provided) ----------
      - name: Apply filesystem override (if provided)
        shell: bash
        run: |
          set -euo pipefail
          case "${FILESYSTEM_OVERRIDE}" in
            "" )  echo "::notice::Using filesystem from manifest: ${FILESYSTEM}" ;;
            spiffs|littlefs)
                 sed -i "s/^FILESYSTEM=.*/FILESYSTEM=${FILESYSTEM_OVERRIDE}/" "$GITHUB_ENV" \
                 || echo "FILESYSTEM=${FILESYSTEM_OVERRIDE}" >> "$GITHUB_ENV"
                 echo "::notice::Overriding filesystem to ${FILESYSTEM_OVERRIDE}"
                 ;;
            * )  echo "::warning::Invalid filesystem override '${FILESYSTEM_OVERRIDE}', keeping '${FILESYSTEM}'" ;;
          esac

      # ---------- Resolve TFT model/enable flags ----------
      - name: Resolve TFT model/enable from input
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${TFT_MODEL_INPUT}" ] && [ "${TFT_MODEL_INPUT}" != "None" ]; then
            echo "DISPLAY_MODEL=${TFT_MODEL_INPUT}" >> $GITHUB_ENV
            echo "DISPLAY_ENABLED=true" >> $GITHUB_ENV
          else
            echo "DISPLAY_MODEL=" >> $GITHUB_ENV
            echo "DISPLAY_ENABLED=" >> $GITHUB_ENV
          fi

      # ---------- Autogen headers ----------
      - name: Generate config.h
        shell: bash
        run: |
          set -euo pipefail
          python3 scaffold/tools/gen_user_config.py \
            --boards-json scaffold/configs/boards/boards_manifest.json \
            --defines-json scaffold/configs/defines/build_defines.json \
            --modules-json scaffold/configs/modules/modules_presets.json \
            --board-flag "${BOARD_FLAG}" \
            --board-label "${BOARD_LABEL}" \
            --profile "${PROFILE_NAME}" \
            --modules-override "${MODULES_CSV}" \
            --pins-override "${CUSTOM_PINS}" \
            --filesystem "${FILESYSTEM}" \
            --out "${{ steps.prep.outputs.sketch_dir }}/.autogen/config.h"

      - name: Generate TFT_eSPI header
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ steps.prep.outputs.sketch_dir }}/.tft_setup"
          python3 scaffold/tools/gen_tft_setup_json.py \
            --boards-json scaffold/configs/boards/boards_manifest.json \
            --displays-json scaffold/configs/displays/display_presets.json \
            --pins-json scaffold/configs/pins/pin_presets.json \
            --board-label "${BOARD_LABEL}" \
            --board-flag "${BOARD_FLAG}" \
            --model "${DISPLAY_MODEL:-}" \
            --tft-enabled "${DISPLAY_ENABLED:-}" \
            --pins-override "${CUSTOM_PINS:-}" \
            --out-dir "${{ steps.prep.outputs.sketch_dir }}/.tft_setup"


      - name: Show generated TFT_eSPI header
        shell: bash
        run: |
          echo "----- User_Setup_Autogen.h -----"
          sed -n '1,200p' "${{ steps.prep.outputs.sketch_dir }}/.tft_setup/User_Setup_Autogen.h" || true


      # ---------- Partitions ----------
      - name: Resolve partition (auto/manual) and install CSV
        id: fs
        shell: bash
        run: |
          set -euo pipefail
          map_choice_to_file() {
            case "$1" in
              "Marauder Default (SPIFFS)") echo "marauder_default.csv" ;;
              "Marauder Default (LittleFS)") echo "marauder_littlefs.csv" ;;
              "Min OTA (SPIFFS)") echo "min_spiffs_ota.csv" ;;
              "Min OTA (LittleFS)") echo "min_littlefs_ota.csv" ;;
              "OTA 1M App + 1M FS (SPIFFS)") echo "ota_1m_fs.csv" ;;
              "Huge App + 1M FS (SPIFFS)") echo "hugeapp_1m_fs.csv" ;;
              "OTA Dual 1M/1M + 2M FS (SPIFFS)") echo "ota_dual_1m_1m.csv" ;;
              "App 2M + FS 2M (SPIFFS)") echo "app_2m_fs_2m.csv" ;;
              "WiFi Capture Big FS (SPIFFS ~3MB)") echo "wifi_capture_bigfs.csv" ;;
              "Marauder SPIFFS OTA (Tiny FS)") echo "marauder_spiffs_ota.csv" ;;
              *) echo "" ;;
            esac
          }

          PART_CHOICE="${PARTITION_CHOICE:-auto}"

          if [ "$PART_CHOICE" = "auto" ]; then
            PARTITION_FILE="${PARTITION%.csv}.csv"
            echo "::notice::Using partition from manifest: $PARTITION_FILE"
          else
            PARTITION_FILE="$(map_choice_to_file "$PART_CHOICE")"
            if [ -z "$PARTITION_FILE" ]; then
              echo "::error::Unknown partition choice: $PART_CHOICE"
              exit 1
            fi
            echo "::notice::Overriding partition to $PARTITION_FILE"
          fi

          echo "PARTITION=$PARTITION_FILE" >> $GITHUB_ENV

          CORE_PART_DIR="$HOME/.arduino15/packages/esp32/hardware/esp32/${CORE_VERSION}/tools/partitions"
          mkdir -p "$CORE_PART_DIR"
          SRC="${GITHUB_WORKSPACE}/partitions/$PARTITION_FILE"

          if [ -f "$SRC" ]; then
            cp -f "$SRC" "$CORE_PART_DIR/$PARTITION_FILE"
            echo "Installed custom partition CSV to $CORE_PART_DIR/$PARTITION_FILE"
          else
            echo "::notice::No custom CSV at partitions/$PARTITION_FILE; relying on core built-ins."
          fi

          echo "fs=$FILESYSTEM" >> $GITHUB_OUTPUT
          echo "partition=$PARTITION_FILE" >> $GITHUB_OUTPUT

      # ---------- Compile ----------
      - name: Compile (Arduino CLI)
        working-directory: ${{ steps.prep.outputs.sketch_dir }}
        shell: bash
        env:
          EXTRA_FLAGS: "-I${{ steps.prep.outputs.sketch_dir }}/.tft_setup -I${{ steps.prep.outputs.sketch_dir }}/.autogen"
        run: |
          set -euo pipefail
          echo "FQBN: $FQBN"
          echo "Sketch dir: $(pwd)"
          echo "Filesystem: $FILESYSTEM"
          echo "Partition:  $PARTITION"

          arduino-cli compile \
            --fqbn "$FQBN" \
            --warnings none \
            --export-binaries \
            --build-property "compiler.cpp.extra_flags=${EXTRA_FLAGS}" \
            --build-property build.partitions=${PARTITION%.csv} \
            --output-dir "$GITHUB_WORKSPACE/build_out" \
            .

      - name: Log partition CSV head
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          CSV_PATH="${GITHUB_WORKSPACE}/partitions/${PARTITION:-}"
          if [ -f "$CSV_PATH" ]; then
            sed -n '1,20p' "$CSV_PATH"
          else
            echo "CSV not found in repo."
          fi

      - name: Inspect ELF and save build log
        shell: bash
        run: |
          set -euo pipefail
          LOG="build_log.txt"
          {
            echo "===== ESP32 Marauder Rewired Build Log ====="
            echo "Run: $GITHUB_RUN_ID"
            echo "Inputs:"
            echo "  board_label      = ${{ github.event.inputs.board_label }}"
            echo "  fqbn_override    = ${{ github.event.inputs.fqbn_override }}"
            echo "  profile_name     = ${{ github.event.inputs.profile_name }}"
            echo "  modules_csv      = ${{ github.event.inputs.modules_csv }}"
            echo "  custom_pins      = ${{ github.event.inputs.custom_pins }}"
            echo "  tft_model        = ${{ github.event.inputs.tft_model }}"
            echo "  filesystem       = ${{ github.event.inputs.filesystem }}"
            echo "  core_choice      = ${{ github.event.inputs.core_choice }}"
            echo "  partition_choice = ${{ github.event.inputs.partition_choice }}"
            echo
            echo "Resolved environment:"
            echo "  BOARD_LABEL   = ${BOARD_LABEL}"
            echo "  BOARD_FLAG    = ${BOARD_FLAG}"
            echo "  FQBN          = ${FQBN}"
            echo "  CORE_VERSION  = ${CORE_VERSION}"
            echo "  FILESYSTEM    = ${FILESYSTEM}"
            echo "  PARTITION     = ${PARTITION}"
            echo "  DISPLAY_MODEL = ${DISPLAY_MODEL:-<none>}"
            echo "  DISPLAY_ENABLED = ${DISPLAY_ENABLED:-<none>}"
            echo
            ELF=$(find "$GITHUB_WORKSPACE/build_out" -name "*.elf" | head -n 1 || true)
            if [ -n "$ELF" ]; then
              echo "ELF: $ELF"
              nm "$ELF" | grep -E "showMainMenu|init_tool_registry" || echo "<none>"
            fi
          } | tee "$LOG"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fw-${{ env.BOARD_LABEL }}-${{ env.CORE_VERSION }}
          path: build_out

      - name: Upload build log
        uses: actions/upload-artifact@v4
        with:
          name: build-debug-log
          path: build_log.txt
