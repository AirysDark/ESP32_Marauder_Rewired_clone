#!/usr/bin/env python3
import os, sys, json, re, argparse, pathlib

def tokens_from_defines(s):
    s = (s or "").strip()
    if not s:
        return []
    parts = re.split(r'[;, \t]+', s)
    return [p for p in parts if p]

def load_display_row(displays_json_path, model):
    rows = json.load(open(displays_json_path, "r", encoding="utf-8"))
    if isinstance(rows, dict) and "presets" in rows:
        rows = rows["presets"]
    for r in rows:
        if (r.get("model") or "").strip() == model:
            return r
    return {}

def find_pins(pin_presets_path, board_label=None, board_flag=None):
    data = json.load(open(pin_presets_path, "r", encoding="utf-8"))
    combined = []
    if isinstance(data, dict):
        combined = data.get("combined", [])
    else:
        combined = data
    candidates = []
    for rec in combined:
        src = rec.get("_source","")
        bl = (rec.get("board_label") or rec.get("name") or "").strip()
        fl = (rec.get("board_flag") or rec.get("flag") or "").strip()
        if src == "display" and ((board_label and bl==board_label) or (board_flag and fl==board_flag)):
            candidates.append(rec)
    if not candidates:
        for rec in combined:
            if rec.get("_source","") == "display" and any(k.startswith("TFT_") for k in rec.keys()):
                candidates.append(rec)
                break
    return candidates[0] if candidates else {}

def write_headers(out_dir, defines_tokens, tft_pins, touch_pins):
    out_dir = pathlib.Path(out_dir)
    out_dir.mkdir(parents=True, exist_ok=True)
    autogen = out_dir / "User_Setup_Autogen.h"
    select  = out_dir / "User_Setup_Select.h"

    lines = ["// Autogenerated by gen_tft_setup_json.py"]
    for tok in defines_tokens:
        lines.append(f"#define {tok}")
        if tok.startswith("TFT_"):
            model = re.sub(r'[^A-Za-z0-9_]', '', tok[len("TFT_"):])
            if model:
                lines.append(f"#define {model}_DRIVER")

    def add_pin(name, val):
        if val is None or val=="" or str(val).lower()=="nan":
            return
        lines.append(f"#define {name} {val}")

    mapping = [
        ("TFT_MISO","TFT_MISO"),
        ("TFT_MOSI","TFT_MOSI"),
        ("TFT_SCK","TFT_SCLK"),
        ("TFT_SCLK","TFT_SCLK"),
        ("TFT_CS","TFT_CS"),
        ("TFT_DC","TFT_DC"),
        ("TFT_RST","TFT_RST"),
        ("TFT_BL","TFT_BL"),
    ]
    for src, dst in mapping:
        v = tft_pins.get(src) or tft_pins.get(dst)
        add_pin(dst, v)

    tc = touch_pins.get("TOUCH_CS") or touch_pins.get("CS") or touch_pins.get("TOUCH_CS_PIN")
    if tc: add_pin("TOUCH_CS", tc)
    for k in ("TOUCH_IRQ","TOUCH_INT","TOUCH_IRQ_PIN"):
        iv = touch_pins.get(k) or touch_pins.get("IRQ")
        if iv:
            add_pin("TOUCH_IRQ", iv); break

    autogen.write_text("\n".join(lines) + "\n", encoding="utf-8")
    select.write_text("// Auto-selected\n#include <User_Setup_Autogen.h>\n", encoding="utf-8")

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--boards-json", default="scaffold/configs/boards/boards_manifest.json")
    ap.add_argument("--displays-json", default="scaffold/configs/displays/display_presets.json")
    ap.add_argument("--pins-json", default="scaffold/configs/pins/pin_presets.json")
    ap.add_argument("--board-label", default="")
    ap.add_argument("--board-flag", default="")
    ap.add_argument("--model", default="")
    ap.add_argument("--tft-enabled", default="true")
    ap.add_argument("--out-dir", required=True)
    args = ap.parse_args()

    tft_enabled = str(args.tft_enabled).strip().lower() in ("1","true","yes","y","on")
    if not tft_enabled or args.model.upper() == "SERIAL_ONLY":
        write_headers(args.out_dir, [], {}, {})
        print("[INFO] Serial-only: generated minimal TFT selector.")
        return

    disp_row = load_display_row(args.displays_json, args.model)
    defines = disp_row.get("defines") or ""
    if isinstance(defines, list):
        tokens = [str(x) for x in defines]
    else:
        tokens = tokens_from_defines(defines)

    pins_row = find_pins(args.pins_json, args.board_label, args.board_flag)
    tft_pins = {k:v for k,v in pins_row.items() if str(k).upper().startswith("TFT_")}
    touch_pins = {k:v for k,v in pins_row.items() if "TOUCH" in str(k).upper()}

    write_headers(args.out_dir, tokens, tft_pins, touch_pins)
    print("[OK] Wrote TFT_eSPI autogen headers.")

if __name__ == "__main__":
    main()
