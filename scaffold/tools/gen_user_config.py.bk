#!/usr/bin/env python3
import os, sys, json, argparse, pathlib

def pick_board(rows, flag=None, label=None):
    if flag:
        for r in rows:
            if r.get("flag")==flag:
                return r
    if label:
        for r in rows:
            if r.get("board_label")==label:
                return r
    return None

def load_json(path):
    try:
        return json.load(open(path, "r", encoding="utf-8"))
    except:
        return None

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--boards-json", default="scaffold/configs/boards/boards_manifest.json")
    ap.add_argument("--defines-json", default="scaffold/configs/defines/build_defines.json")
    ap.add_argument("--modules-json", default="scaffold/configs/modules/modules_presets.json")
    ap.add_argument("--out", required=True)
    ap.add_argument("--board-flag", default="")
    ap.add_argument("--board-label", default="")
    args = ap.parse_args()

    boards = load_json(args.boards_json) or []
    board = pick_board(boards, args.board_flag, args.board_label)
    if not board:
        print(f"::error ::Board not found (flag={args.board_flag} label={args.board_label})")
        sys.exit(1)

    defines = load_json(args.defines_json) or []
    modules = load_json(args.modules_json) or []

    lines = []
    lines.append("// Autogenerated config.h")
    lines.append(f"#define BOARD_FLAG_{board.get('flag','').upper()} 1")
    fs = board.get("filesystem") or "spiffs"
    part = board.get("partition") or "min_spiffs"
    addr = board.get("addr") or "0x1000"
    lines.append(f"#define FS_TYPE_{fs.upper()} 1")
    lines.append(f"#define PARTITION_SCHEME \"{part}\"")
    lines.append(f"#define FLASH_ADDR {addr}")

    disp = board.get("display") or {}
    if disp.get("enabled"):
        lines.append("#define DISPLAY_ENABLED 1")
        if disp.get("model"):
            lines.append(f"#define DISPLAY_MODEL_{disp['model']} 1")
    else:
        lines.append("#define DISPLAY_ENABLED 0")

    libs = board.get("libs") or {}
    if libs.get("nimble_version"):
        lines.append(f"#define NIMBLE_VERSION \"{libs['nimble_version']}\"")
    ea = (libs.get("esp_async") or {})
    if ea.get("version"):
        lines.append(f"#define ESP_ASYNC_WEBSERVER_VERSION \"{ea['version']}\"")

    for row in defines:
        flag = str(row.get("flag") or row.get("name") or "").strip()
        val  = row.get("value")
        if flag:
            if isinstance(val, (int, float)) or (isinstance(val, str) and val.isdigit()):
                lines.append(f"#define {flag} {val}")
            elif isinstance(val, str) and val:
                lines.append(f"#define {flag} \"{val}\"")
            else:
                lines.append(f"#define {flag} 1")

    for m in modules:
        mod = str(m.get("module") or m.get("name") or "").strip()
        en  = m.get("enabled")
        if mod and str(en).lower() in ("1","true","yes","y","on"):
            lines.append(f"#define MODULE_{mod.upper()} 1")

    outp = pathlib.Path(args.out)
    outp.parent.mkdir(parents=True, exist_ok=True)
    outp.write_text("\n".join(lines) + "\n", encoding="utf-8")
    print(f"[OK] Wrote {outp}")

if __name__ == "__main__":
    main()
